<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lucas Caprio on Jhonny Roger</title>
    <link>http://localhost/jhonny-roger/public/author/lucas-caprio/</link>
    <description>Recent content in Lucas Caprio on Jhonny Roger</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Aug 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost/jhonny-roger/public/author/lucas-caprio/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introdução ao AMD com Require.js</title>
      <link>http://localhost/jhonny-roger/public/introducao-ao-amd-com-requirejs/</link>
      <pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/introducao-ao-amd-com-requirejs/</guid>
      <description>Antes de entrarmos no foco do artigo, é importantíssimo tocar no assunto modularização.
A modularização é um conceito muito antigo em termos computacionais, em poucas palavras, é a separação de funcionalidades, redução de complexidade e principalmente, o reuso de código.
O Jean Carlo Emer postou um um artigo aqui mesmo muito bom sobre _Modularização em JavaScript._ Recomendo fortemente ler o artigo na íntegra. Nele, o autor também dá um exemplo com AMD e fala dos pontos fracos e fortes do uso.</description>
    </item>
    
    <item>
      <title>Upload de arquivos com PHP</title>
      <link>http://localhost/jhonny-roger/public/upload-de-arquivos-com-php/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/upload-de-arquivos-com-php/</guid>
      <description>Neste artigo vamos aprender como fazer upload de arquivos com PHP. Porém, com alguns recursos adicionais em cada exemplo.
No primeiro exemplo, iremos fazer um upload básico de apenas um arquivo, assim conseguimos pegar o jeito da coisa.
No segundo exemplo, vamos fazer um upload de múltiplas imagens, e utilizaremos a classe WideImage para tratá-las (redimensionar, cortar e salvar).
E por fim, no último exemplo, vamos fazer o upload por AJAX, utilizando o Jquery Form Plugin.</description>
    </item>
    
    <item>
      <title>Criando uma aplicação Single Page com AngularJS</title>
      <link>http://localhost/jhonny-roger/public/criando-uma-aplicacao-single-page-com-angularjs/</link>
      <pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/criando-uma-aplicacao-single-page-com-angularjs/</guid>
      <description>Um dos melhores conceitos que o AngularJS oferece é o de &amp;#8220;Single Page&amp;#8221;, onde os recursos apropriados são dinamicamente carregados e adicionados à página, conforme necessário, geralmente em resposta a ações do usuário.
Para isto acontecer o framework oferece módulos que te possibilitam ter apenas uma página index, com outras páginas de conteúdo (views) sendo carregadas de acordo com uma específica rota (route).
Deste modo, você consegue separar bem as responsabilidades do seu projeto, e ficando de fácil manutenção e codificação dos elementos.</description>
    </item>
    
  </channel>
</rss>