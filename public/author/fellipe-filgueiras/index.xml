<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fellipe Filgueiras on Jhonny Roger</title>
    <link>http://localhost/jhonny-roger/public/author/fellipe-filgueiras/</link>
    <description>Recent content in Fellipe Filgueiras on Jhonny Roger</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 10 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost/jhonny-roger/public/author/fellipe-filgueiras/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JAVA – Estruturas de Repetição</title>
      <link>http://localhost/jhonny-roger/public/java-estruturas-de-repeticao/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/java-estruturas-de-repeticao/</guid>
      <description>As estruturas de repetição também são conhecidas como laços (loops) e são utilizados para executar, repetidamente, uma instrução ou bloco de instrução enquanto determinada condição estiver sendo satisfeita.
Qualquer que seja a estrutura de repetição, ela contém quatro elementos fundamentais: inicialização, condição, corpo e iteração. A inicialização compõe-se de todo código que determina a condição inicial da repetição. A condição é uma expressão booleana avaliada após cada leitura do corpo e determina se uma nova leitura deve ser feita ou se a estrutura de repetição deve ser encerrada.</description>
    </item>
    
    <item>
      <title>JAVA – Estruturas de Decisão</title>
      <link>http://localhost/jhonny-roger/public/java-estruturas-de-decisao/</link>
      <pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/java-estruturas-de-decisao/</guid>
      <description>As estruturas de decisão são utilizadas para controlar o fluxo de execução dos aplicativos, possibilitando que a leitura das instruções siga caminhos alternativos em função da análise de determinadas condições. Com elas, é possível condicionar a leitura de uma instrução ou de um bloco delas a uma ou mais condições que precisam ser satisfeitas.
Todos os aplicativos de exemplo precedentes executam suas instruções de forma linear, ou seja, todas elas são lidas sequencialmente, na ordem em que foram escritas no código.</description>
    </item>
    
    <item>
      <title>JAVA – Introdução a sua API</title>
      <link>http://localhost/jhonny-roger/public/java-introducao-a-sua-api/</link>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/java-introducao-a-sua-api/</guid>
      <description>A API do Java é composta por dois tipos de recursos distintos: classes e interfaces. Ela é como um bloco dividido em duas grandes partes, são centenas de Interfaces e milhares de classes que acompanham o kit de desenvolvimento do Java e que podem ser empregadas para a realização de diversos tipos de tarefas durante a construção de um programa.
Na API do Java, não existem métodos ou quaisquer tipos de dados desgarrados.</description>
    </item>
    
    <item>
      <title>JAVA – Tipos de dados</title>
      <link>http://localhost/jhonny-roger/public/java-tipos-de-dados/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/java-tipos-de-dados/</guid>
      <description>No Java, existem algumas palavras reservadas para a representação dos tipos de dados básicos que precisam ser manipulados para a construção de programas. Estes tipos de dados são conhecidos como tipos primitivos.
Pode-se dividir os tipos primitivos suportados pelo Java em função da natureza de seu conteúdo. Há quatro tipos primitivos para a representação de números inteiros, dois tipos primitivos para a representação de números fracionários, um tipo primitivo para representação de caracteres e um tipo primitivo para representação dos valores booleanos.</description>
    </item>
    
    <item>
      <title>JAVA – Principais características</title>
      <link>http://localhost/jhonny-roger/public/java-principais-caracteristicas/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/java-principais-caracteristicas/</guid>
      <description>A simplicidade é uma de suas mais importantes características. É isso que possibilita que a sua aprendizagem possa ocorrer sem necessidade de treinamento intensos ou larga experiência anterior. Programadores com conhecimento das linguagens C e C++ encontrarão muitas semelhanças destas com o Java e o assimilarão de forma ainda mais rápida. Além disso, o código escrito com o Java é muito mais limpo do que aquele escrito em C ou C++.</description>
    </item>
    
    <item>
      <title>JAVA – Como plataforma</title>
      <link>http://localhost/jhonny-roger/public/java-como-plataforma/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/java-como-plataforma/</guid>
      <description>Uma plataforma é uma estrutura que possibilita a execução de softwares aplicativos. Basicamente, o que você precisa para rodar um aplicativo são um computador e um sistema operacional instalado nele. Mas os sistemas operacionais são concebidos para determinadas arquiteturas de computadores e são incompatíveis com todas as demais. Por isso, os próprios sistemas operacionais são utilizados para identificar as plataformas.
Do mesmo modo que os sistemas operacionais são compatíveis apenas com determinado tipo de computador, os programas compilados com as tecnologias tradicionais somente são compatíveis com um único sistema operacional, e isso tira o sono de um desenvolvedor quando ele escreve um programa e compila em C++ para executar no Windows, e o mesmo não será possível executar em outra plataforma.</description>
    </item>
    
    <item>
      <title>JAVA – O caminho do aprendizado</title>
      <link>http://localhost/jhonny-roger/public/java-o-caminho-aprendizado/</link>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/java-o-caminho-aprendizado/</guid>
      <description>Para entender o que é o Java, é preciso compreender três elementos que quando estão juntos, se torna possível o desenvolvimento de um sistema, são eles: Uma linguagem de programação, um ambiente de desenvolvimento e uma interface de programas aplicativos (Applications Programming Interface – API).
Uma linguagem é composta por um conjunto de palavras e símbolos utilizados pelos programadores para escrever cada parte de um programa. Além disso, ela também define regras de sintaxe que precisam ser observadas.</description>
    </item>
    
    <item>
      <title>JAVA – A ORIGEM</title>
      <link>http://localhost/jhonny-roger/public/java-origem/</link>
      <pubDate>Tue, 07 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/java-origem/</guid>
      <description>Nossa história começa em 1991, quando um grupo de empregados da Sun Microsystems iniciaram um projeto para pequenos dispositivos eletrônicos de consumo, tais como o PDA (Personal Digital Assistant), o projeto recebeu o nome de Projeto Green, e James Gosling assumiu sua coordenação.
A ideia era possibilitar a criação de programas portáveis que pudessem ser executados em diversos dispositivos. Mais a equipe teria que desenvolver programas específicos para cada tipo de dispositivo, dai surgiu a ideia de desenvolver um sistema operacional que permitiria a utilização de seus programas pelos mais diversos tipos de equipamento.</description>
    </item>
    
  </channel>
</rss>