<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leo Cavalcante on Jhonny Roger</title>
    <link>http://localhost/jhonny-roger/public/author/leo-cavalcante/</link>
    <description>Recent content in Leo Cavalcante on Jhonny Roger</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 04 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost/jhonny-roger/public/author/leo-cavalcante/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Construindo um servidor GraphQL em minutos com a Siler PHP</title>
      <link>http://localhost/jhonny-roger/public/construindo-um-servidor-graphql-em-minutos-com-siler-php/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/construindo-um-servidor-graphql-em-minutos-com-siler-php/</guid>
      <description>Apresento-lhes:
GraphQL: uma query language como o SQL, mas desenhada para rodar no lado client, no caso: front-end.
Siler: uma biblioteca PHP que tem como diferencial simplificar o desenvolvimento evitando overheads. GraphQL A GraphQL trás, na verdade, uma nova abordagem pro desenvolvimento, ela praticamente faz uma inversão de quem fará a consulta aos dados, ou pelo menos, trás essa possibilidade pro lado client, o lado front-end, que antes era refém do que o back-end devolvia no JSON e principalmente a forma como esses dados estavam relacionados nesse JSON.</description>
    </item>
    
    <item>
      <title>Introdução ao Meteor</title>
      <link>http://localhost/jhonny-roger/public/introducao-ao-meteor/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/introducao-ao-meteor/</guid>
      <description>Primeiro, se você ainda não conhece o Meteor, da uma lida aqui.
Não sou tão bom em fazer tutorial quanto em propaganda, deve ser por isso que trabalho numa agência de publicidade e não numa escola, mas vamos ao que interessa, vamos brincar um pouco com Meteor.
Antes de mais nada, obviamente, você precisa instalar em sua máquina. Tem pra Windows, Linux e Mac, não tem erro:
&amp;#8211; https://www.meteor.com/install</description>
    </item>
    
    <item>
      <title>Apresentando: Meteor!</title>
      <link>http://localhost/jhonny-roger/public/apresentando-meteor/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/apresentando-meteor/</guid>
      <description>Fiquei impressionado ao ver que não há nenhum artigo sobre o Meteor no Tableless ainda, ou a busca não tá funcionando muito bem. Por que? Porque é uma plataforma simplesmente fod@! Não conheço nada tão produtivo e simples de usar.
Meteor é uma plataforma open-source pra desenvolver aplicativos pra web e mobile.
Ela é fullstack, te entrega uma solução completa desde o banco de dados até o front-end e essa solução é toda em JavaScript.</description>
    </item>
    
    <item>
      <title>Introdução ao webpack</title>
      <link>http://localhost/jhonny-roger/public/introducao-ao-webpack/</link>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/introducao-ao-webpack/</guid>
      <description>O que é? (Onde vivem? O que comem?) webpack (com &amp;#8220;w&amp;#8221; minúsculo, respeitando a grafia do site oficial) é um empacotador de código para projetos web, como o browserify. O que ele se propõe a fazer de diferente é focar em módulos da sua aplicação. Nem sempre ter todo e qualquer JavaScript/CSS do seu projeto num único arquivo é bom, por isso o webpack tem a ideia de code splitting, onde você modulariza partes reaproveitáveis do seu projeto, facilitando o desenvolvimento independente, por exemplo, ter uma equipe trabalhando em um módulo X e outra num módulo Y, mas ambos de um mesmo projeto.</description>
    </item>
    
  </channel>
</rss>