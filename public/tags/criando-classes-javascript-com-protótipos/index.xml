<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Criando Classes Javascript Com Protótipos on Jhonny Roger</title>
    <link>http://localhost/jhonny-roger/public/tags/criando-classes-javascript-com-prot%C3%B3tipos/</link>
    <description>Recent content in Criando Classes Javascript Com Protótipos on Jhonny Roger</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 14 Jun 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost/jhonny-roger/public/tags/criando-classes-javascript-com-prot%C3%B3tipos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dominando o uso de prototype em JavaScript</title>
      <link>http://localhost/jhonny-roger/public/dominando-o-uso-de-prototype-em-javascript/</link>
      <pubDate>Sat, 14 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/dominando-o-uso-de-prototype-em-javascript/</guid>
      <description>Vários desenvolvedores web falam que protótipos representam uma forma de definirmos tipos de objetos, mas se você observar com cuidado, isto é uma característica de funções.
Perceba que todas as funções têm uma propriedade prototype que, inicialmente, referencia um objeto vazio.
Usando a palavra chave New para invocar a função construtor, temos agora um objeto recém instanciado como seu contexto.
Ex:
function Lutador(){} var lutador1 = new Lutador(); O básico &amp;#8211; Incluindo métodos numa classe (função) Temos nossa classe Lutador, que se encontra vazia e queremos anexar um método a ela.</description>
    </item>
    
  </channel>
</rss>