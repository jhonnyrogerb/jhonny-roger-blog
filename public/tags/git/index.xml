<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Jhonny Roger</title>
    <link>http://localhost/jhonny-roger/public/tags/git/</link>
    <description>Recent content in Git on Jhonny Roger</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 19 Nov 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost/jhonny-roger/public/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Usando GIT para atualizar arquivos no servidor de hospedagem II – Final</title>
      <link>http://localhost/jhonny-roger/public/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem-ii-final/</link>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem-ii-final/</guid>
      <description>Esta é a segunda e última parte do artigo que explica como fazer um esquema simples para deploy automático usando GIT + Bitbucket
A mesma configuração pode ser usada em qualquer servidor GIT e qualquer serviço de hospedagem que tenha acesso via ssh e git instalado
Se você ainda não leu a primeira parte, segue o link: http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem
No artigo anterior, criamos as chaves SSH para autenticação no Bitbucket, criamos um repositório GIT e manualmente executamos o comando | git pull | para atualizar o nosso repositório.</description>
    </item>
    
    <item>
      <title>Usando GIT para atualizar arquivos no servidor de hospedagem</title>
      <link>http://localhost/jhonny-roger/public/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem/</link>
      <pubDate>Thu, 08 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem/</guid>
      <description>Solução usando Bitbucket + Kinghost A mesma configuração pode ser usada em qualquer servidor GIT e qualquer serviço de hospedagem que tenha acesso via ssh e git instalado
Vamos imaginar um cenário em que você está desenvolvendo um site, nesse site você tem vários arquivos, distribuídos em pastas separadas, css, javascript, html, etc&amp;#8230;
Sempre que você altera algum arquivo, precisa enviar por FTP, para atualizar seu site. Um fluxo (antigo), mas parece ser ainda muito normal (infelizmente) por aí.</description>
    </item>
    
    <item>
      <title>Tudo que você queria saber sobre Git e GitHub, mas tinha vergonha de perguntar</title>
      <link>http://localhost/jhonny-roger/public/tudo-que-voce-queria-saber-sobre-git-e-github-mas-tinha-vergonha-de-perguntar/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/tudo-que-voce-queria-saber-sobre-git-e-github-mas-tinha-vergonha-de-perguntar/</guid>
      <description>Este artigo traz a você tudo que precisa saber para se tornar um desenvolvedor que possa dominar tanto o git, quanto o Github. Nosso objetivo é trazer os conhecimentos necessários para que você possa, a partir do zero, dominar os conceitos gerais do git, e usar o github para &amp;#8220;hospedar&amp;#8221; seus projetos pessoais e acompanhar outros projetos de seu interesse.
O que é git? Git é um sistema de controle de versão de arquivos.</description>
    </item>
    
    <item>
      <title>Plugins de GIT para Sublime e Brackets</title>
      <link>http://localhost/jhonny-roger/public/plugins-de-git-para-sublime-e-brackets/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/plugins-de-git-para-sublime-e-brackets/</guid>
      <description>Além do browser, outras duas ferramentas que os desenvolvedores usam todo o santo dia quase que todo o tempo é o seu editor de código e também o GIT. Aqui vão algumas indicações de plugins para Sublime e Brackets que ajudarão na integração do GIT com estes dois editores.
Git no Sublime Se você tiver o Package Control instalado no Sublime, é uma boa ideia instalar estes plugins direto por lá.</description>
    </item>
    
    <item>
      <title>Comandos iniciais do Git</title>
      <link>http://localhost/jhonny-roger/public/alguns-comandos-git/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/alguns-comandos-git/</guid>
      <description>O Git é um sistema de controle de versão. Com o Git você não perderá seu trabalho, vai poder voltar para a versões anteriores, recuperando a versão do seu código de antes de ter cometido o erro e poderá criar e trabalhar diversas versões em paralelo.
Uma ótima leitura que indico é o livro Pro Git, escrito por Scott Chacon. Ele descreve corretamente sobre o controle de versão. Olhe só:</description>
    </item>
    
    <item>
      <title>Slides para devs #10 – GIT</title>
      <link>http://localhost/jhonny-roger/public/slides-devs-10-git/</link>
      <pubDate>Thu, 26 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/slides-devs-10-git/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Git com Interface Gráfica</title>
      <link>http://localhost/jhonny-roger/public/git-com-interface-grafica/</link>
      <pubDate>Mon, 26 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/git-com-interface-grafica/</guid>
      <description>Você deve não gostar de usar Git no terminal do windows, mac ou linux. As vezes você faz muitas alterações e é chato você parar a todo momento para commitar alterações separadas. Prejudica o fluxo do seu trabalho e você acabada perdendo o foco. Por isso as vezes é interessante você usar uma interface mais humana para facilitar as coisas. No site do Git tem indicações interessantes para você poder baixar e utilizar o Git de um jeito mais confortável.</description>
    </item>
    
    <item>
      <title>Iniciando no GIT – Parte 2</title>
      <link>http://localhost/jhonny-roger/public/iniciando-no-git-parte-2/</link>
      <pubDate>Thu, 22 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/iniciando-no-git-parte-2/</guid>
      <description>Já leu a primeira parte desse artigo?
No primeiro artigo aprendemos sobre como funciona o Git, como iniciar um projeto e como inserimos os arquivos que serão controlados pelo sistema.
Status Antes de tudo você precisa entender em qual status os arquivos se encontram. Você pode modificar um arquivo, mas não commita-lo. Veja abaixo uma imagem direto do site do Git que mostra os diversos status dos arquivos.
Você já clonou ou iniciou seu projeto no Git e agora vai fazer modificações nos arquivos e enviar essas modificações para o repositório.</description>
    </item>
    
    <item>
      <title>Iniciando no GIT – Parte 1</title>
      <link>http://localhost/jhonny-roger/public/iniciando-no-git-parte-1/</link>
      <pubDate>Mon, 19 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/iniciando-no-git-parte-1/</guid>
      <description>Não esqueça de ler a segunda parte desse artigo.
Se você não trabalha com nenhum controle de versão ainda ou nem sabe o que isso significa, dá uma lida nesse texto antes de começarmos aqui.
Controles de versão são sistemas que controlam o código gerado em projetos. Se você e mais alguém precisam editar o mesmo arquivo em um mesmo projeto, como você faz? Espera o primeiro editar, salvar e depois subir no FTP só para aí então você abrir o arquivo e fazer suas alterações?</description>
    </item>
    
  </channel>
</rss>