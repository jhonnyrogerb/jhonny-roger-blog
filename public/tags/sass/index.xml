<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sass on Jhonny Roger</title>
    <link>http://localhost/jhonny-roger/public/tags/sass/</link>
    <description>Recent content in Sass on Jhonny Roger</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 28 Mar 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost/jhonny-roger/public/tags/sass/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sass vs. LESS vs. Stylus: Batalha dos Pré-processadores</title>
      <link>http://localhost/jhonny-roger/public/sass-vs-less-vs-stylus-batalha-dos-pre-processadores/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/sass-vs-less-vs-stylus-batalha-dos-pre-processadores/</guid>
      <description>Introdução Pré-processadores CSS3 são linguagens criadas com um único propósito de adicionar funcionalidades legais e criativas para o CSS sem quebrar a compatibilidade entre browsers. Os pré-processadores disponibilizam milhares de funcionalidades, e nesse artigo iremos falar sobre as mais utilizadas e conhecidas e algumas nem tanto conhecidas. Vamos começar:
Sintaxe A parte mais importante ao escrever códigos utilizando um pré-processador é entender a sua sintaxe. Felizmente para nós, a sintaxe é (ou pode ser) idêntica à do CSS puro para os três pré-processadores.</description>
    </item>
    
    <item>
      <title>Afinal, como usar herança no CSS?</title>
      <link>http://localhost/jhonny-roger/public/afinal-como-usar-heranca-no-css/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/afinal-como-usar-heranca-no-css/</guid>
      <description>Herança surgiu para ajudar desenvolvedores a escreverem mesmo e produzirem mais. Vamos ver aqui como esse conceito básico das folhas de estilo pode nos ajudar no dia-a-dia.
Geralmente quando alguém começa a desenvolver interfaces web, o processo é aos trancos e barrancos. Nessa situação, iniciantes buscam aprender como se faz aquela borda arredondada ou como aplicar transparência. Por fim, acabam deixando de lado conceitos básicos de CSS. Levando isso em conta, precisamos primeiramente aprender sobre especificidade e efeito cascata.</description>
    </item>
    
    <item>
      <title>Bootstrap 4 Alpha</title>
      <link>http://localhost/jhonny-roger/public/bootstrap-4-alpha/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/bootstrap-4-alpha/</guid>
      <description>Já faz um tempo que o Bootstrap vem dominando a web. Dificilmente vemos um desenvolvedor que não o conheça, e boa parte da comunidade web já ouviu falar ou já usou o framework.
Agora a equipe do Bootstrap anunciou sua nova versão, o Bootstrap 4 Alpha.

O framework está repleto de novidades. Algumas delas são:
Mudança de Less para Sass O Bootstrap compila mais rápido do que nunca &amp;#8211; graças a Libsass &amp;#8211; e agora se juntaram a esta grande e crescente comunidade de desenvolvedores Sass.</description>
    </item>
    
    <item>
      <title>Processo front-end na Locaweb</title>
      <link>http://localhost/jhonny-roger/public/processo-front-end-na-locaweb/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/processo-front-end-na-locaweb/</guid>
      <description>É muito interessante entender como funcionam os processos em grandes empresas e comparar com processo que você executa na sua própria empresa. Depois que li o post que o Jaydson fez falando um pouco sobre o processo de desenvolvimento no Terra, fiquei de escrever um artigo parecido mostrando mais ou menos como nós aqui da Locaweb fazemos nosso front-end. Sugiro que leia o post do Jaydson e mate a sua curiosidade sobre o processo que eles tem lá.</description>
    </item>
    
    <item>
      <title>Criando Layouts com Susy Framework</title>
      <link>http://localhost/jhonny-roger/public/criando-layouts-com-susy-framework/</link>
      <pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/criando-layouts-com-susy-framework/</guid>
      <description>Com a alta demanda e prazos cada vez menores somos obrigados a trabalhar cada vez mais rápido e isso serve de incentivo para que novos frameworks sejam feitos buscando melhorar a qualidade no desenvolvimento. Um desses frameworks é o Susy e nesse artigo vamos conhecer e dar os primeiros passos com ele.
O que é Susy? Susy é um framework que permite criar grids de acordo com as necessidades do seu site.</description>
    </item>
    
    <item>
      <title>Grid simples com SASS</title>
      <link>http://localhost/jhonny-roger/public/grid-simples-com-sass/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/grid-simples-com-sass/</guid>
      <description>Algumas vezes você vai preferir usar um sistema de grid feito por você e não algum framework do mercado como o Bootstrap ou o Foundation. Isso tem suas vantagens e desvantagens. Mas se você preferir um grid presonalizado, fazer isso com SASS é mole.
Existe uma série de soluções em SASS aí fora. Algumas mais completas que essa, mas essa acaba ganhando por ser muito simples, com menos recursos, mas muito funcional para projetos pequenos.</description>
    </item>
    
    <item>
      <title>Implementação PSD para HTML &#43; SASS</title>
      <link>http://localhost/jhonny-roger/public/implementacao-psd-para-html-sass/</link>
      <pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/implementacao-psd-para-html-sass/</guid>
      <description>Dia 12 de Fevereiro, uma Quinta-feira, iremos fazer um Webinar na Eventials mostrando a implementação de um PSD direto para HTML + SASS.
Eu mesmo farei essa apresentação e tentarei abordar o máximo possível em até 3 horas de Live Coding. Todo o código e também o layout será compartilhado durante e após a aula via GIT.
Irei implementar o layout abaixo:
Vamos escrever muito HTML e CSS, além de um monte de dicas sobre como montar códigos bem estruturados.</description>
    </item>
    
    <item>
      <title>Workflow Front-end</title>
      <link>http://localhost/jhonny-roger/public/workflow-front-end/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/workflow-front-end/</guid>
      <description>O desenvolvimento em html, javascript e CSS é uma forma mágica de se construir um mundo novo a cada linha de código. Os mágicos do front-end precisam de cartolas para que retirem seus coelhos. Essas cartolas e varinhas mágicas devem ser escolhidas a dedo, para que a mágica aconteça de forma suave e agradável à plateia.
Cada mágico tem sua técnica, portanto o objetivo não é estabelecer um padrão imutável, mas estabelecer diretrizes que possam servir de auxílio a qualquer ilusionista.</description>
    </item>
    
    <item>
      <title>Usando seletores aninhados do SASS com cuidado</title>
      <link>http://localhost/jhonny-roger/public/nesting-selectors-sass/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/nesting-selectors-sass/</guid>
      <description>Não é só por que você está usando um pré-processador que as boas práticas de escrita de CSS devem ser ignoradas. Imagine o código abaixo:
&amp;lt;main class=&#34;wrap&#34;&amp;gt; &amp;lt;div class=&#34;content&#34;&amp;gt; &amp;lt;article&amp;gt; &amp;lt;p&amp;gt;Lorem &amp;lt;strong&amp;gt;ipsum dolor sit amet&amp;lt;/strong&amp;gt;. Officia rem sed fuga consequatur rerum.&amp;lt;/p&amp;gt; &amp;lt;/article&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/main&amp;gt;  E você já deve ter visto um seletor desse tipo:
.wrap .content article p strong { color: #ccc; }  Escrever seletores assim é um tiro no pé.</description>
    </item>
    
    <item>
      <title>Usando condicionais no Sass – Control Directives</title>
      <link>http://localhost/jhonny-roger/public/usando-condicionais-sass-control-directives/</link>
      <pubDate>Mon, 25 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/usando-condicionais-sass-control-directives/</guid>
      <description>Ter a possibilidade de usar condicionais no CSS é uma daquelas coisas que fazem os pré-processadores de CSS tão sensuais.
No Sass essas condicionais são chamadas de **Diretivas de controle**, ou em inglês, que é mais chique, &amp;#8220;Control Directives&amp;#8221;. As funções são @if, @for, @each e @while. São as condicionais tradicionais que estamos acostumados a usar nas outras linguagens.
@if Se algo for qualquer coisa diferente de falso, execute determinado comando.</description>
    </item>
    
    <item>
      <title>Instalando SASS na máquina – video</title>
      <link>http://localhost/jhonny-roger/public/instalando-sass-na-maquina-video/</link>
      <pubDate>Mon, 18 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/instalando-sass-na-maquina-video/</guid>
      <description>Se você quiser usar um pré-processador em seus projetos, aqui vão instruções simples para você começar agora. Darei mais atenção para quem usa Mac porque é o sistema que eu uso. Mas no Windows as instruções são quase as mesmas, principalmente se você for usar algum sistema que gerencia os assets. Também estou abordando aqui apenas o SASS, nada de LESS, Style ou qualquer outro pré-processador. Depois desse disclaimer, vamos ao que interessa.</description>
    </item>
    
    <item>
      <title>Utilizando Map Structure do Sass</title>
      <link>http://localhost/jhonny-roger/public/utilizando-maps-sass/</link>
      <pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/utilizando-maps-sass/</guid>
      <description>O Sass é um pré-processador usado para melhorar sua produtividade ao codificar CSS. Dentre as várias funcionalidades, existe uma chamada maps.
O maps é como um array de variáveis. Ela guarda uma série de chaves com valores. A sintaxe é bastante comum, veja:
$map: ( key1: value1, key2: value2, key3: value3 );  A primeira vista se parece com Json, né?
A ideia é que você consiga pegar o valor de qualquer chave que está dentro do seu mapa e usar em momentos onde você irá repetir bastante código.</description>
    </item>
    
    <item>
      <title>SASS: Mixin ou Placeholder?</title>
      <link>http://localhost/jhonny-roger/public/sass-mixin-ou-placeholder/</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/sass-mixin-ou-placeholder/</guid>
      <description>Se é um tema que sempre vejo a respeito da utilização ou não, é sobre o uso de pré processadores CSS. Alguns devs que costumo seguir e ler os artigos, e que pra mim são algumas das nossas referências, apontam as suas considerações sobre o tema. O Miller Medeiros, em um post mostra alguns pontos negativos na utilização de pré processadores. O Jean Carlos Emer em um outro post mostra as reais vantagens de se utilizar um pré-processador.</description>
    </item>
    
    <item>
      <title>Utilizando Mixins em pré-processadores CSS</title>
      <link>http://localhost/jhonny-roger/public/utilizando-mixins-em-css-preprocessors/</link>
      <pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/utilizando-mixins-em-css-preprocessors/</guid>
      <description>Recentemente respondi à uma enquete (não me perguntem aonde, eu esqueci! :-() onde era perguntado sobre como lidávamos com prefixos proprietários em nossos códigos CSS. Até aquele momento apenas cerca de 9% dos participantes usavam Pré-processadores e cerca de 26% escreviam os prefixos do browsers “na unha”.
Pré-processadores de CSS ainda não são um comum para algumas pessoas, mas eu, particularmente, defendo o uso devido à organização e redução de trabalho na escrita de folhas de estilo, proporcionado entre outros, pelo encadeamento e os “mixins”, algo como “associação interna”, que funcionam melhores que muitos analgésicos para dores de cabeça causadas pelo retrabalho.</description>
    </item>
    
    <item>
      <title>Turbinando as Media Queries</title>
      <link>http://localhost/jhonny-roger/public/turbinando-media-queries/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/turbinando-media-queries/</guid>
      <description>Media Queries são uma das ferramenta mais importante do CSS pra quem se preocupa com Web Design Responsivo. Com uma ajudinha dos pré-processadores as media queries podem ficar ainda melhores. Neste artigo vamos turbinar as Media Queries usando um pouco das opções que o SASS nos oferece para ajudar na organização, manutenção e garantir legibilidade ao nosso código.
Nota: os exemplos deste post serão todos em SASS com a sintaxe do .</description>
    </item>
    
    <item>
      <title>Drops 9 – Préprocessadores, frameworks e bibliotecas</title>
      <link>http://localhost/jhonny-roger/public/drops-9-preprocessadores-frameworks-e-bibliotecas/</link>
      <pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/drops-9-preprocessadores-frameworks-e-bibliotecas/</guid>
      <description>Uma continuação do post que escrevi sobre o assunto e a primeira parte de uma série de artigos com dicas sobre como estruturar uma área client-side.
Arquivo Mp3.</description>
    </item>
    
  </channel>
</rss>