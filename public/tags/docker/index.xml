<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Jhonny Roger</title>
    <link>http://localhost/jhonny-roger/public/tags/docker/</link>
    <description>Recent content in Docker on Jhonny Roger</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 28 Apr 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost/jhonny-roger/public/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Iniciando com o Docker: Criando suas próprias imagens</title>
      <link>http://localhost/jhonny-roger/public/iniciando-com-o-docker-criando-suas-proprias-imagens/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/iniciando-com-o-docker-criando-suas-proprias-imagens/</guid>
      <description>No artigo anterior, eu descrevi alguns comandos básicos e como iniciar com o pé direito no mundo do Docker, trazendo de forma direta alguns conceitos que com o passar do tempo se tornaram fundamentais no meu fluxo de desenvolvimento.
Hoje eu quero partir um pouco mais para o lado prático da coisa, vamos construir uma imagem para encapsular uma pequena aplicação em GO.
Primeiros passos O arquivo de manifesto do Docker é o Dockerfile, nele você coloca as instruções de como você quer que sua imagem seja construída.</description>
    </item>
    
    <item>
      <title>Iniciando com o Docker: dicas práticas para começar a usar agora mesmo</title>
      <link>http://localhost/jhonny-roger/public/iniciando-com-o-docker-dicas-praticas-para-comecar-usar-agora-mesmo/</link>
      <pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/iniciando-com-o-docker-dicas-praticas-para-comecar-usar-agora-mesmo/</guid>
      <description>Nós no Elasticpush utilizamos Docker para criar nossos ambientes de desenvolvimento, não que o Docker seja somente para isso, aliás, a sua principal vantagem é poder ter a mesma imagem da sua máquina e em produção.
Mas enquanto não reestruturamos as coisas para rodar o Docker em produção utilizamos suas vantagens no ambiente de desenvolvimento o que já nos trás uma série de benefícios como:
 Facilidade de configuração do ambiente de novos membros da equipe Ter diversas versões da mesma biblioteca rodando sem conflito para testes pontuais Poder trabalhar em outros projetos sem comprometer os recursos da máquina e sem a necessidade de levantar uma Máquina Virtual inteira somente para isso.</description>
    </item>
    
  </channel>
</rss>