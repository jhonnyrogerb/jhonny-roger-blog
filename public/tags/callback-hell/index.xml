<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Callback Hell on Jhonny Roger</title>
    <link>http://localhost/jhonny-roger/public/tags/callback-hell/</link>
    <description>Recent content in Callback Hell on Jhonny Roger</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 30 Dec 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost/jhonny-roger/public/tags/callback-hell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript de forma assíncrona e legível</title>
      <link>http://localhost/jhonny-roger/public/javascript-de-forma-assincrona-e-legivel/</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/javascript-de-forma-assincrona-e-legivel/</guid>
      <description>A programação assíncrona possui a vantagem de gerar códigos perfomáticos. Em certos casos, a implementação de diversas funções assíncronas encadeadas através de funções _callback_ pode prejudicar a leitura e a manutenção do código. Para demonstrar esse encadeamento, vamos utilizar um trecho de código que utiliza a API do Selenium 2. Baseado em um exemplo do site do SauceLabs.
A API do Selenium WebDriver pode ser utilizada por diversas linguagem de programação, porém, em nosso exemplo, iremos utilizar o NodeJS (JavaScript) e o gerenciador de pacotes NPM, que podem ser baixados no site oficial.</description>
    </item>
    
  </channel>
</rss>