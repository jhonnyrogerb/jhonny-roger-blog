<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jasmine on Jhonny Roger</title>
    <link>http://localhost/jhonny-roger/public/tags/jasmine/</link>
    <description>Recent content in Jasmine on Jhonny Roger</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 27 Aug 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost/jhonny-roger/public/tags/jasmine/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Teste automatizado de API com frisby e jasmine</title>
      <link>http://localhost/jhonny-roger/public/teste-automatizado-de-api-com-frisby-e-jasmine/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/teste-automatizado-de-api-com-frisby-e-jasmine/</guid>
      <description>O Frisby é um framework para teste de API REST que roda em cima do nodejs. Seu principal apelo é a facilidade em se fazer testes automatizados de API com o apoio do framework de teste BDD jasmine.
Instalação: Pré requisitos: nodejs, npm.
1) jasmine-node. Instalação global.
sudo npm install -g jasmine-node 2) frisby. Instalação local no projeto.
sudo nam install --save-dev frisby Hello, World! Para o uso devemos instanciar seu módulo:</description>
    </item>
    
    <item>
      <title>Jasmine: entendendo os matchers</title>
      <link>http://localhost/jhonny-roger/public/jasmine-entendendo-os-matchers/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/jasmine-entendendo-os-matchers/</guid>
      <description>Uma parte legal do Jasmine e que adianta muito o nosso lado são os matchers: de um modo resumido e direto, um _matcher_ implementa uma comparação _booleana_ entre o valor atual e o valor esperado. É responsável em passar para o _framework_ se o que esperamos através do nosso teste é _verdadeiro_ ou falso. Com base nisso, o _Jasmine_ vai passar ou falhar a spec.
toEqual Esse talvez seja o mais básico e um dos que mais iremos usar.</description>
    </item>
    
    <item>
      <title>Testando seu código jQuery com Jasmine – Parte 2</title>
      <link>http://localhost/jhonny-roger/public/testando-seu-codigo-jquery-com-jasmine-parte-2/</link>
      <pubDate>Tue, 04 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/testando-seu-codigo-jquery-com-jasmine-parte-2/</guid>
      <description>Jasmine é um framework para testes focado em BDD (Behavior Driven Development). Na primeira parte deste artigo aprendemos seus métodos básicos e realizamos alguns testes simples. Agora chegou a hora de ir um pouco além e conhecer técnicas mais avançadas.
Vale lembrar que, em nossos exemplos, utilizamos uma versão modificada da biblioteca, adaptada para jQuery: jasmine-jquery.
Utilizaremos os dados de um outro artigo, Conteúdo sob demanda com jQuery. O objetivo é testar as solicitações AJAX do carregamento da lista de tweets do Tableless.</description>
    </item>
    
    <item>
      <title>Testando seu código jQuery com Jasmine – Parte 1</title>
      <link>http://localhost/jhonny-roger/public/testando-seu-codigo-jquery-com-jasmine-parte-1/</link>
      <pubDate>Mon, 12 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://localhost/jhonny-roger/public/testando-seu-codigo-jquery-com-jasmine-parte-1/</guid>
      <description>Durante muito tempo testar/debugar JavaScript era uma tarefa árdua (infelizmente, em alguns navegadores, ainda é). Quem aí se lembra do tempo em que não existia Firebug, por exemplo? E o tamanho dos scripts? Um simples menu drop-drown possuía umas 1.500 linhas de código. Não existia jQuery ou qualquer outro tipo de framework. Tempos difíceis.
Hoje a tarefa do desenvolvedor é muito mais fácil. Para debug temos o já citado Firebug e o Developer Tools do Chrome, entre outros.</description>
    </item>
    
  </channel>
</rss>